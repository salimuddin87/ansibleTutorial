# Copyright 2018 bad_db. All rights reserved.
# tddb CONFIDENTIAL AND TRADE SECRET

- name: include variables from cleanupVars.yaml
  include_vars:
    file: cleanupVars.yaml

- name: create '/data/aster/{{ item }}'
  file: path=/data/aster/{{ item }} state=directory
  with_items:
    - manifests
    - files

- name: set template directory to existing aster role if undefined
  set_fact:
     TEMPL_DIR: "../../asterops/templates/etc/aster/manifests/"
  when: TEMPL_DIR is undefined

- name: setting array variables of images
  set_fact:
    MASTER_IMAGES:
      - arc
      - astershell
      - cleanupdaemon
      - ice
      - mailman
      - procmgmt
      - qlmmaster
      - qosmanager
      - queenexec
      - rum
      - runner
      - setupcommon
      - statsserver
      - sysman
      - transdatacont
      - txman
      - txmanslave
      - webservices
    QUEEN_IMAGES:
      - arc
      - astershell
      - cleanupdaemon
      - ice
      - mailman
      - procmgmt
      - qlmmaster
      - qosmanager
      - queenexec
      - rum
      - setupcommon
      - statsserver
      - sysman
      - txman
      - txmanslave
      - webservices
    WORKER_IMAGES:
      - ice
      - rum
      - statsserver
      - txmanslave
      - arc
      - runner
      - setupcommon

- name: include variables from groups_vars/startvars
  include_vars:
      file: ../../../inventory/group_vars/startvars.yml

- name: copy the template yaml files if do not exist already
  template: src={{ TEMPL_DIR }}/{{ item }}.yaml.j2 dest=/data/aster/manifests/{{ item }}.yaml force=no
  with_items:
      - cloud-platform-ns
      - cloud-aster-ns
  when: inventory_hostname in groups['kube_master']
  ignore_errors: no

- name: copy '/etc/aster/manifests/{{ item }}.sh'
  copy: src=etc/aster/manifests/{{ item }}.sh dest=/data/aster/files/{{ item }}.sh mode=0744
  with_items:
    - deleteDockerTarImages
    - deleteNamespaces
    - updateNamespaces
    - dockerRMI
  when: inventory_hostname in groups['kube_aster'][0:]

- name: update namespaces
  shell: /data/aster/files/updateNamespaces.sh {{ CLUSTER_NAME }}
  when: inventory_hostname in groups['kube_master']
  ignore_errors: no

- name: delete aster and platform namespaces
  shell: |
    /data/aster/files/deleteNamespaces.sh {{ CLUSTER_NAME }} aster
  any_errors_fatal: true
  ignore_errors: no
  when: inventory_hostname in groups['kube_master']

- name: List exited containers
  command: docker ps -q -f status=exited
  register: exitedCons
  ignore_errors: yes
  when: inventory_hostname in groups['kube_aster'][0:]

- name: Delete exited containers
  command: docker rm "{{item}}"
  ignore_errors: yes
  when: inventory_hostname in groups['kube_aster'][0:]
  with_items: "{{ exitedCons.stdout_lines }}"

- name: delete docker images from master
  shell: |
    /data/aster/files/dockerRMI.sh {{ item }} master
  with_items:
    "{{ MASTER_IMAGES }}"
  ignore_errors: no
  when: inventory_hostname in groups['kube_master'] and USE_LOCAL_REGISTRY|bool

- name: delete docker images from queen node, local registry
  shell: |
    /data/aster/files/dockerRMI.sh {{ item }} node {{ groups['aster_queen'] }}
  with_items:
    "{{ QUEEN_IMAGES }}"
  ignore_errors: no
  when: inventory_hostname in groups['aster_queen'] and USE_LOCAL_REGISTRY|bool

- name: delete docker images with path from queen node, artifactory
  shell: |
    /data/aster/files/dockerRMI.sh {{ item }} node_remote {{ DOCKER_REPO_PATH }} {{ DOCKER_REPO_HOST }} {{ DOCKER_REPO_PORT }}
  with_items:
    "{{ QUEEN_IMAGES }}"
  ignore_errors: no
  when: inventory_hostname in groups['aster_queen'] and USE_REMOTE_REGISTRY|bool and not REMOTE_ALL|bool

- name: delete all aster docker images with path from queen node, artifactory
  shell: |
    /data/aster/files/dockerRMI.sh {{ item }} node_remote_all {{ DOCKER_REPO_HOST }}
  with_items:
    "{{ QUEEN_IMAGES }}"
  ignore_errors: no
  when: inventory_hostname in groups['aster_queen'] and USE_REMOTE_REGISTRY|bool and REMOTE_ALL|bool

- name: delete docker images from worker nodes, local registry
  shell: |
    /data/aster/files/dockerRMI.sh {{ item }} node {{ groups['aster_queen'] }}
  with_items:
    "{{ WORKER_IMAGES }}"
  ignore_errors: no
  when: inventory_hostname in groups['aster_workers'] and USE_LOCAL_REGISTRY|bool

- name: delete docker images with path from worker nodes, artifactory
  shell: |
    /data/aster/files/dockerRMI.sh {{ item }} node_remote {{ DOCKER_REPO_PATH }} {{ DOCKER_REPO_HOST }} {{ DOCKER_REPO_PORT }}
  with_items:
    "{{ WORKER_IMAGES }}"
  ignore_errors: no
  when: inventory_hostname in groups['aster_workers'] and USE_REMOTE_REGISTRY|bool and not REMOTE_ALL|bool

- name: delete all aster docker images with path from worker nodes, artifactory
  shell: |
    /data/aster/files/dockerRMI.sh {{ item }} node_remote_all {{ DOCKER_REPO_HOST }} {{ DOCKER_REPO_PORT }}
  with_items:
    "{{ WORKER_IMAGES }}"
  ignore_errors: no
  when: inventory_hostname in groups['aster_workers'] and USE_REMOTE_REGISTRY|bool and REMOTE_ALL|bool

- name: delete docker untagged images
  shell: |
    /data/aster/files/dockerRMI.sh untagged untagged
  ignore_errors: no

- name: delete docker tar files from nodes
  shell: |
    /data/aster/files/deleteDockerTarImages.sh {{ item }}.tar
  with_items:
    "{{ MASTER_IMAGES }}"
  ignore_errors: no
  when: inventory_hostname in groups['kube_master'] and USE_LOCAL_REGISTRY|bool and DELETE_TAR_FILES|bool

- name: delete /opt3 directory which holds persistent data
  file: path=/opt3 state=absent
  ignore_errors: no

- name: delete the directory /data/aster from all the nodes
  file:
    path: /data/aster
    state: absent
  when: inventory_hostname in groups['kube_aster'][0:]
  ignore_errors: no
