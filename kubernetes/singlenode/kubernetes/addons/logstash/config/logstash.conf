input {
    beats {
        port => 5000 
   }
}

## Add your filters / logstash plugins configuration here

filter {
  if [type] == "kube-logs" {
    json {
      source => "message"
    }
    
    date {
      match => ["time", "ISO8601"]
    }

    mutate {
        rename => ["log" , "logline"]
        rename => ["time" , "event_time"]
        remove_field =>["offset", "input_type", "count", "type", "beat","fields", "stream"]
    }

    grok {
        match => { "source" => "/var/log/containers/%{DATA:pod_name}_%{DATA:namespace}_%{GREEDYDATA:component}-%{DATA:container_id}.log" }
        remove_field => ["source"]
    }
    
    ## Kubernetes state nested into a subjson 
    mutate {
        rename => {
            "pod_name" => "[kubernetes][pod_name]"
            "container_id" => "[kubernetes][container_id]"
            "namespace" => "[kubernetes][namespace]"
        }
    }

    grok {
        match => { "logline" => "\s+%{LOGLEVEL:level}\s+" }
    }
  }
}

output {
    if "service" in [component]{
        elasticsearch {
            ##containers within the same pod, talk over localhost
            hosts => "localhost:9200"
            index => "service-logs"
            template_name => "service-logs"
            template => "/etc/logstash/conf.d/elasticsearch/service-logs.json"
            template_overwrite => true
        }
    }else if [component] =~ /\d+/ {
        elasticsearch {
            hosts => "localhost:9200"
            index => "app-logs"
            template_name => "app-logs"
            template => "/etc/logstash/conf.d/elasticsearch/app-logs.json"
            template_overwrite => true
        }
    }else{
        elasticsearch {
            hosts => "localhost:9200"
        }
    }
}
